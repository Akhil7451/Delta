Async Functions -   The async function declaration creates a binding of a new async function to a given name. The await keyword is 
                    permitted within the function body, enabling asynchronous, promise-based behavior to be written in a cleaner style
                    and avoiding the need to explicitly configure promise chains.

    Async Keyword   -   With this we create Async Function, these type of functions return a promise function.
        
        async function greet() {      //use async keyword to make a normal function as async function.
            return "hello!";          //its a normal function but after using async this behaves as async function which has promis function.
        }   

    Await Keyword   -   pauses the execution of its surrounding async functions untill the promise is settled(resolved or rejected).
                        can only be applied to async functions.

                        function getNum() {
                            return new Promise((resolve, reject) => {
                                setTimeout(() => {
                                    let num = Math.floor(Math.random() * 10) + 1;
                                    console.log(num);
                                    resolve();
                                }, 1000);
                            });
                        }

                        async function demo() {
                            await getNum();
                            await getNum();
                            await getNum();
                        }

        Handling Rejection with await  -   how to handle if promise is rejected. Let's see in colorchange code.

                        Use trycatch method.

                        let h1 = document.querySelector("h1");

                        function colorChange(color, delay) {
                            return new Promise((resolve, reject) => {
                                setTimeout(() => {
                                    // create a logic for rejection
                                    let num = Math.floor(Math.random() * 10) + 1;
                                    if(num > 3) {
                                        reject("promise reject");
                                    }
                                    h1.style.color = color;
                                    resolve("color changed!");
                                }, delay);
                            });
                        }

                        async function show() {
                            // use trycatch to avoid the execution of code due to error.
                            try {
                                await colorChange("violet", 1000);
                                await colorChange("indigo", 1000);
                                await colorChange("blue", 1000);
                                await colorChange("green", 1000);
                                await colorChange("yellow", 1000);
                                await colorChange("orange", 1000);
                                await colorChange("red", 1000);
                            } catch (error) {
                                console.log("error caught");
                                console.log(error);
                            }
                            let n = 5;
                            console.log(n);
                            console.log("new number is : ", n + 3);
                        }

API -   Application Programming Interface.
        API stands for Application Programming Interface. In the context of APIs, the word Application refers to any software
        with a distinct function. Interface can be thought of as a contract of service between two applications.
        This contract defines how the two communicate with each other using requests and responses.
        APIs which allows us to communicate through HTTPS HTTP are Web APIs

        API will return us DATA which is JSON format.

          User ------ API -----  DATA(JSON format)

JSON    -   JavaScript Object Notation  (www.json.org)
            data in JSON format is similar to our objects where we get key value pairs.Here keys are in String form.

    Accessing Data from JSON    -   

        *   JSON.parse(data) method ->  To parse a string data into a JS object.

            with this we can access the data of JSON as objects in JS.

                // JSON response form api
                let jsonRes = '{"fact":"Cats see six times better in the dark and at night than humans.","length":63}';

                // parsing JSON data into js objects
                const parsedJsonObj = JSON.parse(jsonRes);
                console.log(parsedJsonObj);

        *   JSON.stringify(json) method -> To parse a JS object data into JSON.

            With this we can parse our JS object to JSON format.

                // JS object
                let student = {
                    name: "Akhil",
                    marks: 95.
                };

                //Exporting JS object to JSON format 
                let jsonStud = JSON.stringify(student);

                console.log(jsonStud);

Testing API requests    -   There are tools to test API.

        *   Hoppscotch   -   This tool is available online, and we don't have to download this.

                    hoppscotch.io

        *   Postman     -   To use this we have to download it and have to signup.

Ajax    -   Asynchronous JavaScript and XML
            The process of sending request to API through JS that process is known as Asynchronous Process.
            In this process work is done without reloading page. And send the data as XML format but now in JSON format.
            We need to make sure that all these processes run asynchronously so that user doesn't wait for them.

Http Verbs  -   Activity we can do with out https request of API.

    *   GET     -   Generally used when we want to get any requestr from the given url of API.

    *   POST    -   When we want to post something additionally woth our api request/data.

    *   DELETE  -   When we want to delete the delete any data or request.

Status COdes    -   There are many more status codes but some of them are.

    *   200 - OK                    -   It means everything works fine we can see this while calling api on Hoppscotch.

    *   404 - Not Found             -   If api doesn't exist.

    *   400 - Bad request           -   If request is Bad.

    *   500 - Internal Server   Error -   Internal Server Errors.

Add Information in URLs -   adding aditional info to endpoints.

        Query String    -   with the help of query string we add additional information to our URLs take example of google.
            
                https://www.google.com/search?q=ironman

                        Here ?q=ironman     //this is query string anything we add after q is an additional information.

                        https://api.potterdb.com/   here we can try.

Http Header -   Supply additional information while sending request or getting response in the form of (header, value).

    *   If we get out request in hoppscotch then to change the format of data we can add headers to our URLs

        Header  and there values : These are additional metadata(data about data) that we send with our header.

            Accepted Accept headers: use Accept as a header and and any value from the values given below.

                text/html           - HTML response (default response format)
                application/json    - JSON response
                text/plain          - Plain text response


First API request with JS   -   Using Fetch 

                                Before fetch requests was sending with the help of XMLHTTPRequest object. Here async and await methods are not working.

            fetch(url)  -   

                    let url = "https://catfact.ninja/fact";

                    fetch(url);         //send request.
                
                This request we can check in inspect inside network section.
                fetch(url) this method will return us a promise so we can work with our request using method of promises.
                with the help of then and catch we can perform action with our requests.

                let url = "https://catfact.ninja/fact";

                fetch(url)
                .then((response) => {
                    console.log(response);

                    // // Accessing data

                    // response.json().then((data) => {       //To make the response readable 
                    //     console.log(data);
                    // });

                    return response.json();  // To get the actual response object and not just a promise.
                })
                .then((data) => {
                    console.log(data);
                })
                .catch((error) => {
                    console.log("ERROR : ", error);
                })

            Using Fetch with async/await    -   

                let url = "https://catfact.ninja/fact";

                async function getFact() {
                    let res = await fetch(url);
                    let data = await res.json();
                    console.log(data);
                }
